library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
biocLite(useful)
install.packages(useful)
install.packages(c("useful", "readr", "dplyr", "tidyr", "ggplot2"))
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
install.packages(c("ROCR", "ggplot2", "Hmisc", "reshape", "gplots",
"stringr", "NMF", "mixtools", "lars", "reshape2", "vioplot",
"fastICA", "tsne", "Rtsne", "fpc", "ape", "VGAM", "gdata", "knitr",
"useful", "jackstraw","gridExtra","XLConnect"))
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
install.packages("~/Downloads/Seurat_1.1.tar.gz",type="source",repos=NULL)
install.packages("~/Dropbox/rubin\ lab\ projects/directed\ reprogramming/RNAseq\ project/RNAseq\ R\ Scripts\ and\ RMD\ files/Packages/Seurat_1.1.tar.gz",type="source",repos=NULL)
install.packages("~/Dropbox/rubin\ lab\ projects/directed\ reprogramming/RNAseq\ project/RNAseq\ R\ Scripts\ and\ RMD\ files/Packages/Seurat_1.1.tar.gz",type="source",repos=NULL)
install.packages(c("ROCR", "ggplot2", "Hmisc", "reshape", "reshape2" "gplots","rJava", "RColorBrewer", "gplots", "stringr", "NMF", "mixtools", "lars", "reshape2", "vioplot",
"fastICA", "tsne", "Rtsne", "fpc", "ape", "VGAM", "gdata", "knitr",
"useful", "jackstraw","gridExtra","XLConnect"))
install.packages(c("ROCR", "ggplot2", "Hmisc", "reshape", "reshape2" ,"rJava", "RColorBrewer", "stringr", "NMF", "mixtools", "lars", "reshape2", "vioplot", "fastICA", "tsne", "Rtsne", "fpc", "ape", "VGAM", "gdata", "knitr", "useful", "jackstraw", "gridExtra", "XLConnect"))
install.packages("~/Dropbox/rubin\ lab\ projects/directed\ reprogramming/RNAseq\ project/RNAseq\ R\ Scripts\ and\ RMD\ files/Packages/Seurat_1.1.tar.gz",type="source",repos=NULL)
install.packages("~/Dropbox/rubin\ lab\ projects/directed\ reprogramming/RNAseq\ project/RNAseq\ R\ Scripts\ and\ RMD\ files/Packages/jackstraw_1.1.tar.gz",type="source",repos=NULL)
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("lfa")
install.packages("~/Dropbox/rubin\ lab\ projects/directed\ reprogramming/RNAseq\ project/RNAseq\ R\ Scripts\ and\ RMD\ files/Packages/jackstraw_1.1.tar.gz",type="source",repos=NULL)
install.packages(c("ROCR", "ggplot2", "Hmisc", "reshape", "reshape2" ,"rJava", "RColorBrewer", "stringr", "NMF", "mixtools", "lars", "reshape2", "vioplot", "fastICA", "tsne", "Rtsne", "fpc", "ape", "VGAM", "gdata", "knitr", "useful", "gridExtra", "XLConnect"))
install.packages("~/Dropbox/rubin\ lab\ projects/directed\ reprogramming/RNAseq\ project/RNAseq\ R\ Scripts\ and\ RMD\ files/Packages/Seurat_1.1.tar.gz",type="source",repos=NULL)
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="*.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
```
```{r load-plates}
load("plates.RData")
```
Create a dataframe of the metadata about each sample. This has an identifier
for a sample, Which well it came from, which batch and what it was treated with.
```{r massage-well-identity-data}
welldata_fn = "metadata/Compound Layout 384w.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
```
Verify that the samples match up between the read counts and the metadata dataframe
and make sure there are no NA counts.
```{r verify-data}
dim(welldata)
dim(plates)
table(rownames(welldata) %in% colnames(plates))
corner(plates)
corner(welldata)
table(complete.cases(plates))
```
Looks like we are good to go. While we're at it we will load the positive
control data.
```{r load-positive-control-data}
positive_fn = "data/Feo_positive_controls.unq.refseq.umi.dat"
positive = read.table(positive_fn, header=TRUE, row.names=rownames(plates))
positive$id = NULL
positive_samples = data.frame(str_split_fixed(colnames(positive), "_", 3))
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))$X1
positive_welldata = data.frame(batch=positive_samples$X1,
treatment=positive_samples$X1,
well=positive_samples$X1)
```
Now we will calculate some summary statistics about each sample.
```{r plot-genes-detected}
welldata$genes_detected = colSums(plates > 0)
welldata$genes_detected_zscore = ave(welldata$genes_detected, FUN=scale)
welldata$genes_detected_pval = 2 * pnorm(-abs(welldata$genes_detected_zscore))
welldata$genes_detected_padj = p.adjust(welldata$genes_detected_pval, method="BH")
outliers = subset(welldata, genes_detected_padj < 0.1)
ggplot(outliers, aes(treatment, genes_detected, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts > 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
```
The M2 plate seems to have lower counts than the plates.
```{r low-counts-plate}
ggplot(welldata, aes(batch, genes_detected)) + geom_boxplot() +
ylab("genes with counts > 0") +
xlab("") +
theme_bw()
```
We can see it in the boxplot.
```{r boxplot-counts-plate}
welldata$counts = colSums(plates)
ggplot(welldata, aes(batch, counts)) + geom_boxplot() +
ylab("total counts") +
xlab("") +
theme_bw()
```
And the number of failed wells, where we call a well failed if it
had < 10,000 total counts.
```{r failed-wells}
welldata$failed = colSums(plates) < 10000
welldata %>% group_by(batch) %>% summarise(nfailed = sum(failed))
```
We can also see in an estimate of library complexity that the M2 library
is less complex than the other libraries.
```{r plot-complexity}
ggplot(welldata, aes(counts, genes_detected, color=batch)) +
geom_smooth(fill=NA) +
ylab("genes with counts > 0") +
xlab("total counts") +
theme_bw()
```
In this histogram of the genes detected, we can see there are a set of
samples with a low amount of genes detected.
```{r genes-detected-histogram}
ggplot(welldata, aes(genes_detected)) + geom_histogram() +
theme_bw() + xlab("genes with counts > 0")
```
Here we drop those samples, using a cutoff of 7,500 genes.
```{r drop-low-genes-detected}
welldata = subset(welldata, genes_detected > 7500)
plates = plates[, rownames(welldata)]
```
```{r biomart-conversions}
library(biomaRt)
mouse = useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="mmusculus_gene_ensembl",
host = "jul2015.archive.ensembl.org")
conversions = getBM(attributes=c("ensembl_gene_id", "mgi_symbol", "gene_biotype"),
mart=mouse)
```
Samples do not have very many counts in noise genes, so that is not an issue.
Noise genes are flagged by either being too small to be picked up reliably in a
standard RNA-seq analysis or are highly variable and prone to introducing
distortion such as rRNA.
```{r add-noise-counts}
biotypes = unique(conversions$gene_biotype)
noise_rna_biotypes = c("Mt_tRNA", "Mt_rRNA", "snoRNA", "snRNA", "misc_RNA",
"scaRNA", "rRNA", "sRNA")
noise_rna_genes = subset(conversions, gene_biotype %in% noise_rna_biotypes)$mgi_symbol
noise_rna = rownames(plates)[rownames(plates) %in% noise_rna_genes]
welldata$noise_counts = colSums(plates[noise_rna,])
ggplot(welldata, aes(batch, noise_counts)) + geom_boxplot() +
ylab("counts in noise genes") +
xlab("") +
theme_bw()
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="*.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
library(useful)
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
library(AnnotationDbi)
library(AnnotationForge)
library(devtools)
library(dplyr)
library(edgeR)
library(GenomicFeatures)
library(ggplot2)
library(GO.db)
library(gplots)
library(org.Mm.eg.db)
library(RColorBrewer)
library(reshape)
library(Vennerable)
library(reshape2)
library(rJava)
library(genefilter)
library(stringr)
library(MASS)
library(useful)
library(readr)
library(tidyr)
library(Seurat)
setwd("~/git/rubin-cell-fate-conversion")
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="*.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="*.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
load("plates.RData")
welldata_fn = "metadata/Compound Layout 384w.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
welldata_fn2 = "metadata/WellTreatmentTarget.csv"
welldatatarg = read_csv(welldata_fn2) %>%
dplyr::select(well,treatment,Targets)
View(welldata)
welldatatarg %>% left_join(welldata, by="well")
welldatanew = welldatatarg %>% left_join(welldata, by="well")
View(welldata)
View(welldatatarg)
View(welldata)
View(welldatatarg)
View(welldatanew)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
View(identities)
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldatatarg, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
dim(welldata)
save(welldata, file="welldatatarg.RData")
dim(plates)
table(rownames(welldata) %in% colnames(plates))
corner(plates)
corner(welldata)
table(complete.cases(plates))
welldata$genes_detected = colSums(plates > 0)
welldata$genes_detected_zscore = ave(welldata$genes_detected, FUN=scale)
welldata$genes_detected_pval = 2 * pnorm(-abs(welldata$genes_detected_zscore))
welldata$genes_detected_padj = p.adjust(welldata$genes_detected_pval, method="BH")
outliers = subset(welldata, genes_detected_padj < 0.1)
ggplot(outliers, aes(treatment, genes_detected, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts > 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
ggplot(welldata, aes(batch, genes_detected)) + geom_boxplot() +
ylab("genes with counts > 0") +
xlab("") +
theme_bw()
welldata$counts = colSums(plates)
ggplot(welldata, aes(batch, counts)) + geom_boxplot() +
ylab("total counts") +
xlab("") +
theme_bw()
welldata$failed = colSums(plates) < 10000
welldata %>% group_by(batch) %>% summarise(nfailed = sum(failed))
```
welldata$failed = colSums(plates) < 10000
welldata %>% group_by(batch) %>% summarise(nfailed = sum(failed))
ggplot(welldata, aes(counts, genes_detected, color=batch)) +
geom_smooth(fill=NA) +
ylab("genes with counts > 0") +
xlab("total counts") +
theme_bw()
ggplot(welldata, aes(genes_detected)) + geom_histogram() +
theme_bw() + xlab("genes with counts > 0")
welldata = subset(welldata, genes_detected > 7500)
plates = plates[, rownames(welldata)]
biotypes = unique(conversions$gene_biotype)
noise_rna_biotypes = c("Mt_tRNA", "Mt_rRNA", "snoRNA", "snRNA", "misc_RNA",
"scaRNA", "rRNA", "sRNA")
noise_rna_genes = subset(conversions, gene_biotype %in% noise_rna_biotypes)$mgi_symbol
noise_rna = rownames(plates)[rownames(plates) %in% noise_rna_genes]
welldata$noise_counts = colSums(plates[noise_rna,])
ggplot(welldata, aes(batch, noise_counts)) + geom_boxplot() +
ylab("counts in noise genes") +
xlab("") +
theme_bw()
library(biomaRt)
mouse = useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="mmusculus_gene_ensembl",
host = "jul2015.archive.ensembl.org")
conversions = getBM(attributes=c("ensembl_gene_id", "mgi_symbol", "gene_biotype"),
mart=mouse)
biotypes = unique(conversions$gene_biotype)
noise_rna_biotypes = c("Mt_tRNA", "Mt_rRNA", "snoRNA", "snRNA", "misc_RNA",
"scaRNA", "rRNA", "sRNA")
noise_rna_genes = subset(conversions, gene_biotype %in% noise_rna_biotypes)$mgi_symbol
noise_rna = rownames(plates)[rownames(plates) %in% noise_rna_genes]
welldata$noise_counts = colSums(plates[noise_rna,])
ggplot(welldata, aes(batch, noise_counts)) + geom_boxplot() +
ylab("counts in noise genes") +
xlab("") +
theme_bw()
plates = plates[!rownames(plates) %in% noise_rna_genes,]
plates = plates[rowSums(plates > 0) > 4 & rowSums(plates) > 100,]
knitr::kable(welldata %>% group_by(batch) %>% summarize(total=n()))
