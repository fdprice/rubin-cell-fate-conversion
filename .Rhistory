knitr::opts_chunk$set(tidy=TRUE, highlight=TRUE, dev="png",
cache=TRUE, highlight=TRUE, autodep=TRUE, warning=FALSE, error=FALSE,
message=FALSE, prompt=TRUE, comment='', fig.cap='')
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("~/rubin-cell-fate-conversion")
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="*.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("~/rubin-cell-fate-conversion")
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="\\.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
load("plates.RData")
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
welldata$genes_detected = colSums(plates > 0)
welldata$genes_detected_zscore = ave(welldata$genes_detected, FUN=scale)
welldata$genes_detected_pval = 2 * pnorm(-abs(welldata$genes_detected_zscore))
welldata$genes_detected_padj = p.adjust(welldata$genes_detected_pval, method="BH")
outliers = subset(welldata, genes_detected_padj < 0.1)
ggplot(outliers, aes(treatment, genes_detected, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts < 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
ggplot(welldata, aes(batch, genes_detected)) + geom_boxplot() +
ylab("genes with counts > 0") +
xlab("") +
theme_bw()
welldata$counts = colSums(plates)
ggplot(welldata, aes(batch, counts)) + geom_boxplot() +
ylab("total counts") +
xlab("") +
theme_bw()
ggplot(welldata, aes(well, counts, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts < 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
welldata$failed = colSums(plates) < 10000
welldata %>% group_by(batch) %>% summarise(nfailed = sum(failed))
ggplot(welldata, aes(counts, genes_detected, color=batch)) +
geom_smooth(fill=NA) +
ylab("genes with counts > 0") +
xlab("total counts") +
theme_bw()
welldata = subset(welldata, genes_detected > 7500)
plates = plates[, rownames(welldata)]
ggplot(welldata, aes(genes_detected)) + geom_histogram() +
theme_bw() + xlab("genes with counts > 0")
plates = plates[rowSums(plates > 0) > 4 & rowSums(plates) > 100,]
knitr::kable(welldata %>% group_by(batch) %>% summarize(total=n()))
plates = plates[rowSums(plates > 0) > 4 & rowSums(plates) > 60,]
knitr::kable(welldata %>% group_by(batch) %>% summarize(total=n()))
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="\\.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
load("plates.RData")
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
welldata$genes_detected = colSums(plates > 0)
welldata$genes_detected_zscore = ave(welldata$genes_detected, FUN=scale)
welldata$genes_detected_pval = 2 * pnorm(-abs(welldata$genes_detected_zscore))
welldata$genes_detected_padj = p.adjust(welldata$genes_detected_pval, method="BH")
outliers = subset(welldata, genes_detected_padj < 0.1)
welldata$counts = colSums(plates)
ggplot(welldata, aes(batch, counts)) + geom_boxplot() +
ylab("total counts") +
xlab("") +
theme_bw()
welldata$failed = colSums(plates) < 10000
welldata %>% group_by(batch) %>% summarise(nfailed = sum(failed))
View(welldata)
ggplot(welldata, aes(genes_detected)) + geom_histogram() +
theme_bw() + xlab("genes with counts > 0")
welldata = subset(welldata, genes_detected > 7500)
plates = plates[, rownames(welldata)]
plates.new = plates[rowSums(plates > 0) > 4 & rowSums(plates) > 60,]
knitr::kable(welldata %>% group_by(batch) %>% summarize(total=n()))
View(welldata)
plates = plates[rowSums(plates > 0) > 4 & rowSums(plates) > 60,]
knitr::kable(welldata %>% group_by(batch) %>% summarize(total=n()))
View(plates)
library(devtools)
library(Seurat)
seurat.raw.data = data.frame(log(plates + 1))
seurat.data = new('seurat', raw.data=seurat.raw.data)
seurat.data = Setup(seurat.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=welldata)
seurat.data = MeanVarPlot(seurat.data, fxn.x = expMean, fxn.y = logVarDivMean, y.cutoff = 1, x.low.cutoff = 1)
seurat.data = PCA(seurat.data, do.print=TRUE)
PCAPlot(seurat.data, 1, 2, pt.size=2)
TSNEseurat = RunTSNE(seurat.data, dim_embed = 3, perplexity = 30, max_iter=600)
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("~/rubin-cell-fate-conversion")
# Creating a function to organize the data
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="\\.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
load("plates.RData")
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
table(complete.cases(plates))
welldata$genes_detected = colSums(plates > 0)
welldata$genes_detected_zscore = ave(welldata$genes_detected, FUN=scale)
welldata$genes_detected_pval = 2 * pnorm(-abs(welldata$genes_detected_zscore))
welldata$genes_detected_padj = p.adjust(welldata$genes_detected_pval, method="BH")
outliers = subset(welldata, genes_detected_padj < 0.1)
ggplot(welldata, aes(well, counts, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts < 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
write.csv(welldata, "~/rubin-cell-fate-conversion/welldata.csv")
welldata$counts = colSums(plates)
ggplot(welldata, aes(batch, counts)) + geom_boxplot() +
ylab("total counts") +
xlab("") +
theme_bw()
ggplot(welldata, aes(well, counts, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts < 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
write.csv(welldata, "~/rubin-cell-fate-conversion/welldata.csv")
```
welldata$failed = colSums(plates) < 10000
welldata %>% group_by(batch) %>% summarise(nfailed = sum(failed))
welldata = subset(welldata, genes_detected > 7500)
plates = plates[, rownames(welldata)]
library(biomaRt)
mouse = useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="mmusculus_gene_ensembl",
host = "jul2015.archive.ensembl.org")
conversions = getBM(attributes=c("ensembl_gene_id", "mgi_symbol", "gene_biotype"),
mart=mouse)
biotypes = unique(conversions$gene_biotype)
noise_rna_biotypes = c("Mt_tRNA", "Mt_rRNA", "snoRNA", "snRNA", "misc_RNA",
"scaRNA", "rRNA", "sRNA")
noise_rna_genes = subset(conversions, gene_biotype %in% noise_rna_biotypes)$mgi_symbol
noise_rna = rownames(plates)[rownames(plates) %in% noise_rna_genes]
welldata$noise_counts = colSums(plates[noise_rna,])
ggplot(welldata, aes(batch, noise_counts)) + geom_boxplot() +
ylab("counts in noise genes") +
xlab("") +
theme_bw()
```{r drop-noise-genes}
plates = plates[!rownames(plates) %in% noise_rna_genes,]
```
plates = plates[rowSums(plates > 0) > 4 & rowSums(plates) > 60,]
library(devtools)
library(Seurat)
seurat.raw.data = data.frame(log(plates + 1))
seurat.data = new('seurat', raw.data=seurat.raw.data)
seurat.data = Setup(seurat.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=welldata)
seurat.data = MeanVarPlot(seurat.data, fxn.x = expMean, fxn.y = logVarDivMean, y.cutoff = 1, x.low.cutoff = 1)
seurat.data = PCA(seurat.data, do.print=TRUE)
PCAPlot(seurat.data, 1, 2, pt.size=2)
TSNEseurat = RunTSNE(seurat.data, dim_embed = 3, perplexity = 30, max_iter=600)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
help("TSNEPlot")
help("colors.use")
help("PCAPlot")
?DimPlot
seurat.data = PCA(seurat.data, do.print=TRUE)
PCAPlot(seurat.data, 1, 2, pt.size=2, group.by = "identity")
seurat.data = PCA(seurat.data, do.print=TRUE)
PCAPlot(seurat.data, 1, 2, pt.size=2, group.by = "Identity")
seurat.data = PCA(seurat.data, do.print=TRUE)
PCAPlot(seurat.data, 1, 2, pt.size=2, group.by = batch)
View(seurat.raw.data)
seurat.data = PCA(seurat.data, do.print=TRUE)
tibble::rownames_to_column(var = "sample") %>%
left_join(seurat.data, by="sample")
seurat.data = PCA(seurat.data, do.print=TRUE)
rot = seurat.data@pca.rot %>%
add_rownames(var="sample")  %>%
left_join(welldata, by="sample")
rot = seurat.data@pca.rot %>%
tibble::rownames_to_column(var="sample")  %>%
left_join(welldata, by="sample")
PCAPlot(rot, 1, 2, pt.size=2, label=treatment, group.by = batch)
?PCAPlot
?DimPlot
rot = seurat.data@pca.rot %>%
tibble::rownames_to_column(var="sample")  %>%
left_join(welldata, by="sample")
PCAPlot(rot, 1, 2, pt.size=2, group.by = treatment)
ggplot(rot, aes(PC1, PC2, shape=treatment, color=batch)) +
geom_point(size=4) +
theme_bw()
ggplot(rot, aes(PC1, PC2, color=treatment)) +
geom_point(size=4) +
theme_bw()
?ggplot
?geom_point
ggplot(rot, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, show.legend=FALSE) +
theme_bw()
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="\\.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
load("plates.RData")
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
welldata$genes_detected = colSums(plates > 0)
welldata$genes_detected_zscore = ave(welldata$genes_detected, FUN=scale)
welldata$genes_detected_pval = 2 * pnorm(-abs(welldata$genes_detected_zscore))
welldata$genes_detected_padj = p.adjust(welldata$genes_detected_pval, method="BH")
outliers = subset(welldata, genes_detected_padj < 0.1)
welldata$counts = colSums(plates)
seurat.raw.data = data.frame(log(plates + 1))
seurat.data = new('seurat', raw.data=seurat.raw.data)
seurat.data = Setup(seurat.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=welldata)
seurat.data = MeanVarPlot(seurat.data, fxn.x = expMean, fxn.y = logVarDivMean, y.cutoff = 1, x.low.cutoff = 1)
seurat.data = PCA(seurat.data, do.print=TRUE)
rot = seurat.data@pca.rot %>%
tibble::rownames_to_column(var="sample")  %>%
left_join(welldata, by="sample")
ggplot(rot, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, show.legend=FALSE) +
theme_bw()
ggplot(rot, aes(PC1, PC2, color=treatment, label=name)) +
geom_point(size=4, show.legend=FALSE) +
theme_bw()
View(rot)
ggplot(rot, aes(PC1, PC2, color=batch, label=treatment)) +
geom_point(size=4, show.legend=FALSE) +
theme_bw()
ggplot(rot, aes(PC1, PC2, label=treatment)) +
geom_point(size=4, show.legend=FALSE) +
theme_bw()
ggplot(rot, aes(PC1, PC2, label=treatment)) +
geom_point(size=4, show.legend=FALSE) +
geom_point() +geom_text(aes(label=Name),hjust=0, vjust=0) +
theme_bw()
ggplot(rot, aes(PC1, PC2, label=treatment)) +
geom_point(size=4, show.legend=FALSE) +
geom_point() +geom_text(aes(label=treatment),hjust=0, vjust=0) +
theme_bw()
ggplot(rot, aes(PC1, PC2, label=treatment, color=batch)) +
geom_point(size=4, show.legend=FALSE) +
geom_point() +geom_text(aes(label=treatment),hjust=0, vjust=0) +
theme_bw()
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="\\.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
Sphdata = plates[, c!(1,23,24,25,47,48,49,71,72,73,95,96,97,119,120,121,143,144,145,167,168,169,191,192,193,194,216,217,218,240,241,242,264,265,266,288,289,290,312,313,314,336,337,338,360,361,362,384)]
Sphdata = plates[, != c(1,23,24,25,47,48,49,71,72,73,95,96,97,119,120,121,143,144,145,167,168,169,191,192,193,194,216,217,218,240,241,242,264,265,266,288,289,290,312,313,314,336,337,338,360,361,362,384)]
View(plates)
Sphdata = plates[, c(!1,23,24,25,47,48,49,71,72,73,95,96,97,119,120,121,143,144,145,167,168,169,191,192,193,194,216,217,218,240,241,242,264,265,266,288,289,290,312,313,314,336,337,338,360,361,362,384)]
View(Sphdata)
