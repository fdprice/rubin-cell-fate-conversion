library(Seurat)
seurat.raw.data = data.frame(log(plates + 1))
seurat.data = new('seurat', raw.data=seurat.raw.data)
seurat.data = setup(seurat.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=welldata)
seurat.data = MeanVarPlot(seurat.data, fxn.x = expMean, fxn.y = logVarDivMean, y.cutoff = 1, x.low.cutoff = 1)
seurat.data = PCA(seurat.data, do.print=FALSE)
PCAPlot(seurat.data, 1, 2, pt.size=2)
write.table(rownames(plates), file="expressed.txt", quote=FALSE, row.names=FALSE, col.names=FALSE)
simpledata = subset(welldata, treatment %in% c("DMSO", "AdMyoD"))
View(simpledata)
simpledata$sample = rownames(simpledata)
simple = plates[, rownames(simpledata)]
simple.raw.data = data.frame(log(simple + 1))
simple.data = new('seurat', raw.data=simple.raw.data)
simple.data = setup(simple.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=simpledata)
simple.data = mean.var.plot(simple.data, y.cutoff = 2, x.low.cutoff = 2,
fxn.x = expMean,fxn.y = logVarDivMean)
simple.data = pca(simple.data, do.print=FALSE)
simpledata = subset(welldata, treatment %in% c("DMSO", "AdMyoD"))
simpledata$sample = rownames(simpledata)
simple = plates[, rownames(simpledata)]
simple.raw.data = data.frame(log(simple + 1))
simple.data = new('seurat', raw.data=simple.raw.data)
simple.data = setup(simple.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=simpledata)
simple.data = mean.var.plot(simple.data, y.cutoff = 1, x.low.cutoff = 1,
fxn.x = expMean,fxn.y = logVarDivMean)
simple.data = PCA(simple.data, do.print=FALSE)
rot = simple.data@pca.rot %>%
add_rownames(var="sample")  %>%
left_join(simpledata, by="sample")
rot = simple.data@pca.rot %>%
add_rownames(var="sample")  %>%
left_join(simpledata, by="sample")
ggplot(rot, aes(PC1, PC2, shape=treatment, color=batch)) +
geom_point(size=4) +
theme_bw()
components = simple.data@pca.x
components = components[order(-abs(components$PC1)),]
components = components[order(-abs(components$PC2)),]
write.table(head(rownames(components), 100), file="myo-vs-dmso-pc2.txt", quote=FALSE,
row.names=FALSE, col.names=FALSE)
components = simple.data@pca.x
components = components[order(-abs(components$PC2)),]
write.table(head(rownames(components), 100), file="myo-vs-dmso-pc2.txt", quote=FALSE,
row.names=FALSE, col.names=FALSE)
View(components)
components = simple.data@pca.x
components = components[order(-abs(components$PC2)),]
write.table(head(rownames(components), 30), file="myo-vs-dmso-pc2.txt", quote=FALSE,
row.names=FALSE, col.names=FALSE)
write.table(head(rownames(components)[order(-abs(components$PC2))], 50),
file="myo-vs-dmso-pc1.txt", quote=FALSE, row.names=FALSE, col.names=FALSE)
components = simple.data@pca.x
components = components[order(-abs(components$PC2)),]
write.table(head(rownames(components), 100), file="myo-vs-dmso-pc2.txt", quote=FALSE,
row.names=FALSE, col.names=FALSE)
write.table(head(rownames(components)[order(-abs(components$PC1))], 50),
file="myo-vs-dmso-pc1.txt", quote=FALSE, row.names=FALSE, col.names=FALSE)
rot = simple.data@pca.rot %>%
tibble::rownames_to_column(var=“sample”) %>%
left_join(simpledata, by="sample")
tibble::rownames_to_column(var = “sample”) %>%
rot = simple.data@pca.rot %>%
tibble::rownames_to_column(var = sample) %>%
left_join(simpledata, by="sample")
rot = simple.data@pca.rot %>%
tibble::rownames_to_column(var = "sample") %>%
left_join(simpledata, by="sample")
View(rot)
ggplot(rot, aes(PC1, PC2, shape=treatment, color=batch)) +
geom_point(size=4) +
theme_bw()
View(rot)
seurat.data = pca(seurat.data, pc.genes=rownames(components))
welldata$classes = ifelse(welldata$treatment == "DMSO", "DMSO",
ifelse(welldata$treatment == "AdMyoD", "AdMyoD", "other"))
rot = seurat.data@pca.rot %>%
add_rownames(var="sample")  %>%
left_join(welldata, by="sample")
rot = seurat.data@pca.rot %>%
tibble::rownames_to_column(var="sample")  %>%
left_join(welldata, by="sample")
ggplot(rot, aes(PC1, PC2, color=classes, label=treatment)) +
geom_point(size=1) +
geom_text(size=3) +
theme_bw()
ggplot(rot, aes(PC1, PC2, color=batch, label=treatment)) +
coord_cartesian(xlim=c(0.00, 0.05), ylim=c(-0.06, 0.05)) +
geom_text(size=2) +
theme_bw()
ggplot(rot, aes(PC1, PC2, color=classes, label=treatment)) +
coord_cartesian(xlim=c(0.00, 0.05), ylim=c(-0.06, 0.05)) +
geom_text(size=2) +
theme_bw()
ggplot(rot, aes(PC1, PC2, color=batch, label=treatment)) +
coord_cartesian(xlim=c(0.00, 0.05), ylim=c(-0.06, 0.05)) +
geom_text(size=2) +
theme_bw()
ggplot(rot, aes(PC1, PC2, color=classes, label=treatment)) +
geom_point(size=1) +
geom_text(size=3) +
theme_bw()
ggplot(rot, aes(PC1, PC2, color=batch, label=treatment)) +
coord_cartesian(xlim=c(-10.00, 10.00), ylim=c(0.00, -6.00)) +
geom_text(size=2) +
theme_bw()
View(rot)
ggplot(rot, aes(PC1, PC2, color=classes, label=treatment)) +
geom_point(size=1) +
geom_text(size=3) +
theme_bw()
simple.data = project.pca(simple.data, do.print = FALSE)
projected = simple.data@pca.x.full
projected = projected[order(-abs(projected$PC2)),]
simple.data = ProjectPCA(simple.data, do.print = FALSE)
projected = simple.data@pca.x.full
projected = projected[order(-abs(projected$PC2)),]
simple.data = jackStraw(simple.data, num.replicate=1000, prop.freq=0.025)
jackStrawPlot(simple.data)
simple.data = project.pca(simple.data, do.print = FALSE,do.center=FALSE)
genes.sig = pca.sig.genes(simple.data, pcs.use=c(1, 2), pval.cut = 0.001, use.full=TRUE)
simple.data = ProjectPCA(simple.data, do.print = FALSE,do.center=FALSE)
genes.sig = PCASigGenes(simple.data, pcs.use=c(1, 2), pval.cut = 0.001, use.full=TRUE)
write.table(genes.sig, file="pc1-jackstraw-sig.txt",
quote=FALSE, row.names=FALSE, col.names=FALSE)
ggplot(rot, aes(PC1, PC2, color=classes, label=treatment)) +
geom_point(size=1) +
geom_text(size=3) +
theme_bw()
simple.data=pca(simple.data, pc.genes=genes.sig)
rot = simple.data@pca.rot %>%
add_rownames(var="sample")  %>%
left_join(simpledata, by="sample")
ggplot(rot, aes(PC1, PC2, shape=treatment, color=batch)) +
geom_point(size=4) +
theme_bw()
seurat.data=pca(seurat.data, pc.genes=genes.sig)
rot = seurat.data@pca.rot %>%
tibble::rownames_to_column(var="sample")  %>%
left_join(welldata, by="sample")
ggplot(rot, aes(PC1, PC2, label=treatment, color=batch)) +
geom_text(size=2) +
theme_bw()
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("~/rubin-cell-fate-conversion")
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="\\.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
load("plates.RData")
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
dim(welldata)
dim(plates)
table(rownames(welldata) %in% colnames(plates))
corner(plates)
corner(welldata)
table(complete.cases(plates))
positive_fn = "data/Feo_positive_controls.unq.refseq.umi.SC_and_Myoblast_Raw.txt"
positive = read.table(positive_fn, header=TRUE, row.names=rownames(plates))
positive$id = NULL
positive_samples = data.frame(str_split_fixed(colnames(positive), "_", 3))
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))$X1
positive_welldata = data.frame(batch=positive_samples$X1,
treatment=positive_samples$X1,
well=positive_samples$X1)
welldata$genes_detected = colSums(plates > 0)
welldata$genes_detected_zscore = ave(welldata$genes_detected, FUN=scale)
welldata$genes_detected_pval = 2 * pnorm(-abs(welldata$genes_detected_zscore))
welldata$genes_detected_padj = p.adjust(welldata$genes_detected_pval, method="BH")
outliers = subset(welldata, genes_detected_padj < 0.1)
ggplot(outliers, aes(treatment, genes_detected, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts < 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
ggplot(welldata, aes(batch, genes_detected)) + geom_boxplot() +
ylab("genes with counts > 0") +
xlab("") +
theme_bw()
welldata$counts = colSums(plates)
ggplot(welldata, aes(batch, counts)) + geom_boxplot() +
ylab("total counts") +
xlab("") +
theme_bw()
ggplot(welldata, aes(well, counts, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts < 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
welldata$failed = colSums(plates) < 10000
welldata %>% group_by(batch) %>% summarise(nfailed = sum(failed))
ggplot(welldata, aes(counts, genes_detected, color=batch)) +
geom_smooth(fill=NA) +
ylab("genes with counts > 0") +
xlab("total counts") +
theme_bw()
ggplot(welldata, aes(genes_detected)) + geom_histogram() +
theme_bw() + xlab("genes with counts > 0")
welldata = subset(welldata, genes_detected > 7500)
plates = plates[, rownames(welldata)]
library(biomaRt)
mouse = useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="mmusculus_gene_ensembl",
host = "jul2015.archive.ensembl.org")
conversions = getBM(attributes=c("ensembl_gene_id", "mgi_symbol", "gene_biotype"),
mart=mouse)
biotypes = unique(conversions$gene_biotype)
noise_rna_biotypes = c("Mt_tRNA", "Mt_rRNA", "snoRNA", "snRNA", "misc_RNA",
"scaRNA", "rRNA", "sRNA")
noise_rna_genes = subset(conversions, gene_biotype %in% noise_rna_biotypes)$mgi_symbol
noise_rna = rownames(plates)[rownames(plates) %in% noise_rna_genes]
welldata$noise_counts = colSums(plates[noise_rna,])
ggplot(welldata, aes(batch, noise_counts)) + geom_boxplot() +
ylab("counts in noise genes") +
xlab("") +
theme_bw()
plates = plates[!rownames(plates) %in% noise_rna_genes,]
plates = plates[rowSums(plates > 0) > 4 & rowSums(plates) > 100,]
knitr::kable(welldata %>% group_by(batch) %>% summarize(total=n()))
library(devtools)
library(Seurat)
seurat.raw.data = data.frame(log(plates + 1))
seurat.data = new('seurat', raw.data=seurat.raw.data)
seurat.data = Setup(seurat.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=welldata)
seurat.data = MeanVarPlot(seurat.data, fxn.x = expMean, fxn.y = logVarDivMean, y.cutoff = 1, x.low.cutoff = 1)
seurat.data = PCA(seurat.data, do.print=FALSE)
PCAPlot(seurat.data, 1, 2, pt.size=2)
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="\\.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("~/rubin-cell-fate-conversion")
# Creating a function to organize the data
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="\\.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
str(plates)
View(plates)
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
View(welldata)
dim(welldata)
dim(plates)
View(welldata)
View(plates)
Sphdata = plates[, c(1,23,24,25)]
View(Sphdata)
View(plates)
Sphwelldata = welldata[, c(1,23,24,25)]
View(welldata)
Sphdata = Sphdata[, rownames(welldata)]
Sphdata = plates[, c(1,23,24,25,47,48,49,71,72,73,95,96,97,119,120,121,143,144,145,167,168,169,191,192,193,194,216,217,218,240,241,242,264,265,266,288,289,290,312,313,314,336,337,338,360,361,362,384)]
View(Sphdata)
View(welldata)
Sphwelldata = welldata[c(1,23,24,25),]
Sphwelldata = welldata[c(1,23,24,25,47,48,49,71,72,73,95,96,97,119,120,121,143,144,145,167,168,169,191,192,193,194,216,217,218,240,241,242,264,265,266,288,289,290,312,313,314,336,337,338,360,361,362,384)]
Sphwelldata = welldata[,c(1,23,24,25,47,48,49,71,72,73,95,96,97,119,120,121,143,144,145,167,168,169,191,192,193,194,216,217,218,240,241,242,264,265,266,288,289,290,312,313,314,336,337,338,360,361,362,384)]
Sphwelldata = welldata[, c(1,23,24,25,47,48,49,71,72,73,95,96,97,119,120,121,143,144,145,167,168,169,191,192,193,194,216,217,218,240,241,242,264,265,266,288,289,290,312,313,314,336,337,338,360,361,362,384)]
Sphwelldata = welldata[ ,c(1,23,24,25,47,48,49,71,72,73,95,96,97,119,120,121,143,144,145,167,168,169,191,192,193,194,216,217,218,240,241,242,264,265,266,288,289,290,312,313,314,336,337,338,360,361,362,384)]
Sphwelldata = welldata[c(1,23,24,25,47,48,49,71,72,73,95,96,97,119,120,121,143,144,145,167,168,169,191,192,193,194,216,217,218,240,241,242,264,265,266,288,289,290,312,313,314,336,337,338,360,361,362,384),]
View(Sphwelldata)
write.table(Sphdata, file="Sph1.dat", sep="\t", quote=FALSE)
load("Sph1.dat")
load("~/rubin-cell-fate-conversion/Sph1.dat")
write.table(Sphdata, file="Sph1.dat")
load("Sph1.dat")
TSNEPlot(seurat.data, 1, 2, pt.size=2)
RunTSNE(seurat.data)
View(Sphwelldata)
TSNEPlot(seurat.data, 1, 2, pt.size=2)
help("TSNEPlot")
help("RunTSNE")
TSNEseurat = RunTSNE(seurat.data)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
TSNEPlot(TSNEseurat, 1, 3, pt.size=2)
TSNEPlot(TSNEseurat, 1, 4, pt.size=2)
TSNEPlot(TSNEseurat, 1, 5, pt.size=2)
TSNEPlot(TSNEseurat, 2, 3, pt.size=2)
seurat.data = PCA(seurat.data, do.print=FALSE)
PCAPlot(seurat.data, 1, 2, pt.size=2)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
View(plates)
View(plates)
seurat.raw.data = data.frame(log(plates + 1))
View(seurat.raw.data)
seurat.data = new('seurat', raw.data=seurat.raw.data)
seurat.data = Setup(seurat.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=welldata)
seurat.data = MeanVarPlot(seurat.data, fxn.x = expMean, fxn.y = logVarDivMean, y.cutoff = 1, x.low.cutoff = 1)
TSNEseurat = RunTSNE(seurat.data)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("~/rubin-cell-fate-conversion")
# Creating a function to organize the data
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="\\.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
load("plates.RData")
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
dim(welldata)
dim(plates)
table(rownames(welldata) %in% colnames(plates))
corner(plates)
corner(welldata)
table(complete.cases(plates))
welldata$genes_detected = colSums(plates > 0)
welldata$genes_detected_zscore = ave(welldata$genes_detected, FUN=scale)
welldata$genes_detected_pval = 2 * pnorm(-abs(welldata$genes_detected_zscore))
welldata$genes_detected_padj = p.adjust(welldata$genes_detected_pval, method="BH")
outliers = subset(welldata, genes_detected_padj < 0.1)
ggplot(outliers, aes(treatment, genes_detected, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts < 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
welldata$counts = colSums(plates)
ggplot(welldata, aes(batch, counts)) + geom_boxplot() +
ylab("total counts") +
xlab("") +
theme_bw()
ggplot(welldata, aes(well, counts, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts < 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
write.csv(welldata, "~/rubin-cell-fate-conversion/welldata.csv")
welldata$failed = colSums(plates) < 10000
welldata %>% group_by(batch) %>% summarise(nfailed = sum(failed))
ggplot(welldata, aes(counts, genes_detected, color=batch)) +
geom_smooth(fill=NA) +
ylab("genes with counts > 0") +
xlab("total counts") +
theme_bw()
welldata = subset(welldata, genes_detected > 7500)
plates = plates[, rownames(welldata)]
library(biomaRt)
mouse = useMart(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="mmusculus_gene_ensembl",
host = "jul2015.archive.ensembl.org")
conversions = getBM(attributes=c("ensembl_gene_id", "mgi_symbol", "gene_biotype"),
mart=mouse)
biotypes = unique(conversions$gene_biotype)
noise_rna_biotypes = c("Mt_tRNA", "Mt_rRNA", "snoRNA", "snRNA", "misc_RNA",
"scaRNA", "rRNA", "sRNA")
noise_rna_genes = subset(conversions, gene_biotype %in% noise_rna_biotypes)$mgi_symbol
noise_rna = rownames(plates)[rownames(plates) %in% noise_rna_genes]
welldata$noise_counts = colSums(plates[noise_rna,])
ggplot(welldata, aes(batch, noise_counts)) + geom_boxplot() +
ylab("counts in noise genes") +
xlab("") +
theme_bw()
plates = plates[!rownames(plates) %in% noise_rna_genes,]
knitr::kable(welldata %>% group_by(batch) %>% summarize(total=n()))
library(devtools)
library(Seurat)
seurat.raw.data = data.frame(log(plates + 1))
seurat.data = new('seurat', raw.data=seurat.raw.data)
seurat.data = Setup(seurat.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=welldata)
seurat.data = MeanVarPlot(seurat.data, fxn.x = expMean, fxn.y = logVarDivMean, y.cutoff = 1, x.low.cutoff = 1)
seurat.data = PCA(seurat.data, do.print=FALSE)
PCAPlot(seurat.data, 1, 2, pt.size=2)
help ("PCAPlot")
help ("PCA")
seurat.data = PCA(seurat.data, do.print=TRUE)
PCAPlot(seurat.data, 1, 2, pt.size=2)
simpledata = subset(welldata, treatment %in% c("DMSO", "AdMyoD"))
simpledata$sample = rownames(simpledata)
simple = plates[, rownames(simpledata)]
simple.raw.data = data.frame(log(simple + 1))
simple.data = new('seurat', raw.data=simple.raw.data)
simple.data = Setup(simple.data, project="rubin", min.cells=1, min.genes=1000,
is.expr=1, meta.data=simpledata)
simple.data = MeanVarPlot(simple.data, y.cutoff = 1, x.low.cutoff = 1,
fxn.x = expMean,fxn.y = logVarDivMean)
simple.data = PCA(simple.data, do.print=FALSE)
rot = simple.data@pca.rot %>%
tibble::rownames_to_column(var = "sample") %>%
left_join(simpledata, by="sample")
ggplot(rot, aes(PC1, PC2, shape=treatment, color=batch)) +
geom_point(size=4) +
theme_bw()
md_samples = rownames(subset(welldata, treatment %in% c("AdMyoD", "DMSO")))
md_metadata = welldata[md_samples,]
md_counts = plates[, md_samples]
library(DESeq2)
install.packages("deseq2")
seurat.data = PCA(seurat.data, do.print=TRUE)
PCAPlot(seurat.data, 1, 2, pt.size=2)
TSNEseurat = RunTSNE(seurat.data)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
help ("TSNEPlot")
help("RunTSNE")
vlnPlot(seurat.data,c("Pax7","MyoD","MyoG","nGene"))
VlnPlot(seurat.data,c("nGene"))
VlnPlot(seurat.data,c("MyoD","MyoG","nGene"))
VlnPlot(seurat.data,c("MyoD1","MyoG","nGene"))
VlnPlot(seurat.data,c("MyoG","nGene"))
VlnPlot(seurat.data,c("MYOG","nGene"))
help("Setup")
pcHeatmap(seurat.data, pc.use = 1, do.balanced = FALSE)
PCAPlot(seurat.data, 1, 2, pt.size=2)
help("RunTSNE")
TSNEseurat = RunTSNE(seurat.data, dim_embed = 3, add.iter = 5)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
TSNEseurat = RunTSNE(seurat.data, dim_embed = 3, perplexity = 100)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
TSNEseurat = RunTSNE(seurat.data, dim_embed = 3, perplexity = 100, max_iter=300)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
TSNEseurat = RunTSNE(seurat.data, dim_embed = 3, perplexity = 500, max_iter=300)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
TSNEseurat = RunTSNE(seurat.data, dim_embed = 3, perplexity = 50, max_iter=300)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
TSNEseurat = RunTSNE(seurat.data, dim_embed = 3, perplexity = 10, max_iter=300)
TSNEPlot(TSNEseurat, 1, 2, pt.size=2)
