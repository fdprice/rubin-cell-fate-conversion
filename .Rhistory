knitr::opts_chunk$set(tidy=TRUE, highlight=TRUE, dev="png",
cache=TRUE, highlight=TRUE, autodep=TRUE, warning=FALSE, error=FALSE,
message=FALSE, prompt=TRUE, comment='', fig.cap='')
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("~/Dropbox/Rubin Lab Projects/directed reprogramming/Screenseq Project/Results and Data/RNAseq R Scripts and RMD files/Screenseq_1B")
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="*.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
setwd("~/Dropbox/Rubin Lab Projects/directed reprogramming/Screenseq Project/Results and Data/RNAseq R Scripts and RMD files/Screenseq_1B")
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
setwd("~/Dropbox/Rubin Lab Projects/directed reprogramming/Screenseq Project/Results and Data/RNAseq R Scripts and RMD files/Screenseq_1B")
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="*.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
load("plates.RData")
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
colnames(identities) = c("batch", "drop", "well")
identities$id = colnames(plates)
welldata = identities %>% dplyr::select(batch, well) %>%
left_join(welldata, by="well")
rownames(welldata) = colnames(plates)
welldata$sample = colnames(plates)
dim(welldata)
dim(plates)
table(rownames(welldata) %in% colnames(plates))
corner(plates)
corner(welldata)
table(complete.cases(plates))
positive_fn = "data/Feo_positive_controls.unq.refseq.umi.SC_and_Myoblast_Raw.txt"
positive = read.table(positive_fn, header=TRUE, row.names=rownames(plates))
positive$id = NULL
positive_samples = data.frame(str_split_fixed(colnames(positive), "_", 3))
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))$X1
positive_welldata = data.frame(batch=positive_samples$X1,
treatment=positive_samples$X1,
well=positive_samples$X1)
View(welldata)
View(plates)
welldata$genes_detected = colSums(plates > 0)
welldata$genes_detected_zscore = ave(welldata$genes_detected, FUN=scale)
welldata$genes_detected_pval = 2 * pnorm(-abs(welldata$genes_detected_zscore))
welldata$genes_detected_padj = p.adjust(welldata$genes_detected_pval, method="BH")
outliers = subset(welldata, genes_detected_padj < 0.1)
ggplot(outliers, aes(treatment, genes_detected, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts > 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
View(outliers)
ggplot(outliers, aes(treatment, genes_detected, fill=batch)) +
geom_bar(stat='identity', position='dodge') +
facet_wrap(~batch) +
geom_hline(yintercept=ave(welldata$genes_detected), linetype="dashed") +
ylab("genes with counts > 0") +
xlab("") +
theme_bw() +
scale_x_discrete(breaks=NULL)
ggplot(outliers, aes(treatment, genes_detected, fill=batch))
geom_bar(stat='identity', position='dodge')
ggplot(outliers, aes(treatment, genes_detected, fill=batch)) +
geom_bar(stat='identity', position='dodge')
View(outliers)
ggplot(welldata, aes(batch, genes_detected)) + geom_boxplot() +
ylab("genes with counts > 0") +
xlab("") +
theme_bw()
welldata$genes_detected = colSums(plates > 0)
welldata_fn = "metadata/Compound Layout 384w1B.csv"
welldata = read_csv(welldata_fn) %>%
gather(column, treatment, -row) %>%
mutate(well=paste(row, column, sep="")) %>%
dplyr::select(well, treatment)
View(welldata)
identities = data.frame(str_split_fixed(colnames(plates), "_", 3))
View(identities)
View(plates)
ggplot(welldata, aes(counts, genes_detected, color=batch)) +
geom_smooth(fill=NA) +
ylab("genes with counts > 0") +
xlab("total counts") +
theme_bw()
welldata$counts = colSums(plates)
welldata$failed = colSums(plates) < 10000
ggplot(welldata, aes(genes_detected)) + geom_histogram() +
theme_bw() + xlab("genes with counts > 0")
View(welldata)
welldata = subset(welldata, genes_detected > 7500)
setwd("~/Users/feodorprice/rubin-cell-fate-conversion")
setwd("~/rubin-cell-fate-conversion")
setwd("~/rubin-cell-fate-conversion")
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="*.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
library(useful)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("~/rubin-cell-fate-conversion")
plate_reader = function(fn) {
batch = strsplit(basename(fn), ".", fixed=TRUE)[[1]][1]
data = read.table(fn, header=TRUE, row.names=1)
colnames(data) = paste(batch, colnames(data), sep="_")
data
}
plates_fns = sort(list.files("data", pattern="*.dat", full.names=TRUE))
plates = do.call(cbind, lapply(plates_fns, plate_reader))
save(plates, file="plates.RData")
